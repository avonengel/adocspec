plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '2.0.0'
    id 'org.itsallcode.openfasttrace' version '0.6.0'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id 'com.github.hierynomus.license' version '0.15.0'
}

group = 'com.github.avonengel'
description = 'Extension for AsciidoctorJ to specify requirements via OpenFastTrace'

def release = findProperty('release')?.toBoolean()
version = "0.2.0${release ? '' : '-SNAPSHOT'}"

repositories {
    jcenter()
}

configurations {
    codacy
    asciidoctor {
        extendsFrom runtimeClasspath
    }
}

dependencies {
    asciidoctor sourceSets.main.output
    asciidoctor 'ch.qos.logback:logback-classic:1.2.3'

    compileOnly 'org.asciidoctor:asciidoctorj:1.6.2'
    implementation 'org.itsallcode:openfasttrace:2.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.25'

    // Use JUnit test framework
    testImplementation enforcedPlatform('org.junit:junit-bom:5.4.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.apache.commons:commons-lang3:3.8.1'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.assertj:assertj-core:3.11.1'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'org.asciidoctor:asciidoctorj:1.6.2'

    codacy 'com.codacy:codacy-coverage-reporter:6.0.0'
}

tasks.withType(org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    configurations('asciidoctor')
    outputOptions {
        // TODO: task does not re-run when backends change. report bug @GitHub
        backends = ['html5', 'spec']
        separateOutputDirs = false
    }
}

test {
    useJUnitPlatform()
}

asciidoctor {
    attributes << [
            'build-gradle'      : file('build.gradle'),
            'sourcedir'         : project.sourceSets.main.java.srcDirs[0],
            'source-highlighter': 'coderay',
            'toc'               : 'left',
            'icons'             : 'font',
            'project-version'   : version,
            'specfile'          : new File(buildDir, "spec.reqm.xml"),
            'javadoc-dir'       : 'javadoc',
    ]
}

task oftAdocspec(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    inputs.files(classes)
    sourceDir = file('src/test/resources/oft')
    outputDir = new File(project.buildDir, 'oft')
}

requirementTracing {
    inputDirectories = files(asciidoctor.outputDir, 'src/main', 'src/test/java')
    reportFormat = 'html'
}
collectRequirements.dependsOn(asciidoctor)

task documentation(dependsOn: [javadoc, asciidoctor]) {
    group 'documentation'
    description 'Creates all documentation'
}

task docZip(type: Zip) {
    archiveBaseName = 'documentation'
    from asciidoctor
    into('javadoc') {
        from javadoc
    }
    duplicatesStrategy = 'EXCLUDE'
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}
publishing {
    publications {
        adocspec(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "$group:${project.name}"
                description = project.description
                url = 'https://github.com/avonengel/adocspec'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl.html'
                    }
                }
                developers {
                    developer {
                        name = 'Axel von Engel'
                        email = 'a.vonengel@gmail.com'
                        url = 'https://github.com/avonengel'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/mavonengel/adocspec.git'
                    developerConnection = 'scm:git:ssh://github.com:avonengel/adocspec.git'
                    url = 'https://github.com/avonengel/adocspec'
                }
            }
        }
    }
}
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.release &&
                !version.endsWith('-SNAPSHOT')) ||
                (repository == publishing.repositories.snapshot &&
                        version.endsWith('-SNAPSHOT'))
    }
}
signing {
    useGpgCmd()
    sign publishing.publications.adocspec
}
String ossrhUsername = findProperty('ossrh.username')
String ossrhPassword = findProperty('ossrh.password')
if (!ossrhUsername?.trim() || !ossrhPassword?.trim()) {
    logger.info('No username and/or password found for OSSRH repository, skipping configuration.')
} else {
    publishing.repositories {
        maven {
            name = 'snapshot'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
        maven {
            name = 'release'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    nexusStaging {
        packageGroup = 'com.github.avonengel'
        username = ossrhUsername
        password = ossrhPassword
    }
}

license {
    header = file('gradle/license-header.txt')
    strictCheck = true
    skipExistingHeaders = false
    ext.year = 2019
    ext.name = 'Axel von Engel'
    ext.email = 'a.vonengel@gmail.com'
    excludes(['oft/*.xml'])
}

task uploadCoverage(type: JavaExec, dependsOn : jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            jacocoTestReport.reports.xml.destination
    ]
    dependsOn jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
    dependsOn test
}
